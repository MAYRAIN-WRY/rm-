这个。
代码水平不太够目前写不出来dij算法    :D

膨胀地图的代码：
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<vector<double>> generate_expanded_grid(const vector<vector<int>>& grid, double t) {
    int n = grid.size();
    int m = grid[0].size();
    vector<vector<double>> expanded_grid(n, vector<double>(m, 0));

    // 膨胀地图的生成
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            expanded_grid[i][j] = grid[i][j];
            if (i > 0) expanded_grid[i][j] += t * grid[i-1][j];  // 上
            if (i < n-1) expanded_grid[i][j] += t * grid[i+1][j];  // 下
            if (j > 0) expanded_grid[i][j] += t * grid[i][j-1];  // 左
            if (j < m-1) expanded_grid[i][j] += t * grid[i][j+1];  // 右
        }
    }

    return expanded_grid;
}

int main() {
    int n, m;
    cin >> n >> m;

    vector<vector<int>> grid(n, vector<int>(m));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cin >> grid[i][j];
        }
    }

    double t;
    cin >> t;

    vector<vector<double>> expanded_grid = generate_expanded_grid(grid, t);

    // 输出膨胀地图
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cout << expanded_grid[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}